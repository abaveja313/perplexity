2024-04-08 01:03:47,508 - ERROR - [ForkPoolWorker-3] - Query files: 
2024-04-08 01:03:47,508 - ERROR - [ForkPoolWorker-3] - log_functions.ql 
2024-04-08 01:03:47,510 - ERROR - [ForkPoolWorker-3] - import java

from Method m
where m.fromSource() 
    and m.getDeclaringType().hasName("ExchangeConfig")
select m.getQualifiedName(), m.getStringSignature() 
2024-04-08 01:03:47,512 - ERROR - [ForkPoolWorker-3] - count_stats.ql 
2024-04-08 01:03:47,514 - ERROR - [ForkPoolWorker-3] - import java

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%")
    )
  )
}

int getClassOtherInvocations(Method targetMethod) {
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() = targetMethod.getDeclaringType() | mCall)    
}

int getNonClassUnknownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      not hasKnownPackage(mCall.getCallee())
  )
}

int getNonClassKnownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      hasKnownPackage(mCall.getCallee())
  )
}

int numSpecialFeatures(Method m) {
  result =
    count(LambdaExpr e | e.getEnclosingCallable() = m) +
    count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
    count(FunctionalExpr e | e.getEnclosingCallable() = m) +
    count(SwitchExpr e | e.getEnclosingCallable() = m) +
    count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
    count(MemberRefExpr e | e.getEnclosingCallable() = m) +
    count(CastExpr e | e.getEnclosingCallable() = m) +
    count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
    count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
    count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
    count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
    count(CharacterLiteral e | e.getEnclosingCallable() = m) +
    count(PreIncExpr e | e.getEnclosingCallable() = m) +
    count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m
where
  m.fromSource() and
  m.hasStringSignature("applyDefaultConfig(ExchangeConfig)") and
  m.getDeclaringType().hasName("ExchangeConfig")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // field accesses
  count(FieldWrite f | f.getEnclosingCallable() = m and f.getField().fromSource()) as field_writes,
  getClassOtherInvocations(m) as same_class_other_invoc,
  getNonClassKnownInvocations(m) as diff_class_known_invoc,
  getNonClassUnknownInvocations(m) as diff_class_unknown_invoc,
  count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
  numSpecialFeatures(m) as special_count 
2024-04-08 01:03:47,515 - ERROR - [ForkPoolWorker-3] - count_test_stats.ql 
2024-04-08 01:03:47,517 - ERROR - [ForkPoolWorker-3] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("applyDefaultConfig(ExchangeConfig)") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("ExchangeConfig") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
2024-04-08 01:03:47,519 - ERROR - [ForkPoolWorker-3] - validate_test.ql 
2024-04-08 01:03:47,520 - ERROR - [ForkPoolWorker-3] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("applyDefaultConfig(ExchangeConfig)") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("ExchangeConfig") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
2024-04-08 01:06:14,937 - ERROR - [ForkPoolWorker-4] - Query files: 
2024-04-08 01:06:14,938 - ERROR - [ForkPoolWorker-4] - log_functions.ql 
2024-04-08 01:06:14,939 - ERROR - [ForkPoolWorker-4] - import java

from Method m
where m.fromSource() 
    and m.getDeclaringType().hasName("ExchangeConfig")
select m.getQualifiedName(), m.getStringSignature() 
2024-04-08 01:06:14,940 - ERROR - [ForkPoolWorker-4] - count_stats.ql 
2024-04-08 01:06:14,942 - ERROR - [ForkPoolWorker-4] - import java

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%")
    )
  )
}

int getClassOtherInvocations(Method targetMethod) {
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() = targetMethod.getDeclaringType() | mCall)    
}

int getNonClassUnknownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      not hasKnownPackage(mCall.getCallee())
  )
}

int getNonClassKnownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      hasKnownPackage(mCall.getCallee())
  )
}

int numSpecialFeatures(Method m) {
  result =
    count(LambdaExpr e | e.getEnclosingCallable() = m) +
    count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
    count(FunctionalExpr e | e.getEnclosingCallable() = m) +
    count(SwitchExpr e | e.getEnclosingCallable() = m) +
    count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
    count(MemberRefExpr e | e.getEnclosingCallable() = m) +
    count(CastExpr e | e.getEnclosingCallable() = m) +
    count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
    count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
    count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
    count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
    count(CharacterLiteral e | e.getEnclosingCallable() = m) +
    count(PreIncExpr e | e.getEnclosingCallable() = m) +
    count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m
where
  m.fromSource() and
  m.hasStringSignature("applyDefaultConfig(ExchangeConfig)") and
  m.getDeclaringType().hasName("ExchangeConfig")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // field accesses
  count(FieldWrite f | f.getEnclosingCallable() = m and f.getField().fromSource()) as field_writes,
  getClassOtherInvocations(m) as same_class_other_invoc,
  getNonClassKnownInvocations(m) as diff_class_known_invoc,
  getNonClassUnknownInvocations(m) as diff_class_unknown_invoc,
  count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
  numSpecialFeatures(m) as special_count 
2024-04-08 01:06:14,943 - ERROR - [ForkPoolWorker-4] - count_test_stats.ql 
2024-04-08 01:06:14,944 - ERROR - [ForkPoolWorker-4] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("applyDefaultConfig(ExchangeConfig)") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("ExchangeConfig") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
2024-04-08 01:06:22,216 - ERROR - [ForkPoolWorker-4] - Query files: 
2024-04-08 01:06:22,216 - ERROR - [ForkPoolWorker-4] - log_functions.ql 
2024-04-08 01:06:22,218 - ERROR - [ForkPoolWorker-4] - import java

from Method m
where m.fromSource() 
    and m.getDeclaringType().hasName("AutoReQueueScheduler")
select m.getQualifiedName(), m.getStringSignature() 
2024-04-08 01:06:22,220 - ERROR - [ForkPoolWorker-4] - count_stats.ql 
2024-04-08 01:06:22,222 - ERROR - [ForkPoolWorker-4] - import java

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%")
    )
  )
}

int getClassOtherInvocations(Method targetMethod) {
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() = targetMethod.getDeclaringType() | mCall)    
}

int getNonClassUnknownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      not hasKnownPackage(mCall.getCallee())
  )
}

int getNonClassKnownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      hasKnownPackage(mCall.getCallee())
  )
}

int numSpecialFeatures(Method m) {
  result =
    count(LambdaExpr e | e.getEnclosingCallable() = m) +
    count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
    count(FunctionalExpr e | e.getEnclosingCallable() = m) +
    count(SwitchExpr e | e.getEnclosingCallable() = m) +
    count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
    count(MemberRefExpr e | e.getEnclosingCallable() = m) +
    count(CastExpr e | e.getEnclosingCallable() = m) +
    count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
    count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
    count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
    count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
    count(CharacterLiteral e | e.getEnclosingCallable() = m) +
    count(PreIncExpr e | e.getEnclosingCallable() = m) +
    count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m
where
  m.fromSource() and
  m.hasStringSignature("autoReQueue()") and
  m.getDeclaringType().hasName("AutoReQueueScheduler")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // field accesses
  count(FieldWrite f | f.getEnclosingCallable() = m and f.getField().fromSource()) as field_writes,
  getClassOtherInvocations(m) as same_class_other_invoc,
  getNonClassKnownInvocations(m) as diff_class_known_invoc,
  getNonClassUnknownInvocations(m) as diff_class_unknown_invoc,
  count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
  numSpecialFeatures(m) as special_count 
2024-04-08 01:06:22,224 - ERROR - [ForkPoolWorker-4] - count_test_stats.ql 
2024-04-08 01:06:22,226 - ERROR - [ForkPoolWorker-4] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("autoReQueue()") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("AutoReQueueScheduler") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
2024-04-08 01:06:39,882 - ERROR - [ForkPoolWorker-4] - Query files: 
2024-04-08 01:06:39,882 - ERROR - [ForkPoolWorker-4] - log_functions.ql 
2024-04-08 01:06:39,884 - ERROR - [ForkPoolWorker-4] - import java

from Method m
where m.fromSource() 
    and m.getDeclaringType().hasName("BindingConfig")
select m.getQualifiedName(), m.getStringSignature() 
2024-04-08 01:06:39,885 - ERROR - [ForkPoolWorker-4] - count_stats.ql 
2024-04-08 01:06:39,886 - ERROR - [ForkPoolWorker-4] - import java

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%")
    )
  )
}

int getClassOtherInvocations(Method targetMethod) {
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() = targetMethod.getDeclaringType() | mCall)    
}

int getNonClassUnknownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      not hasKnownPackage(mCall.getCallee())
  )
}

int getNonClassKnownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      hasKnownPackage(mCall.getCallee())
  )
}

int numSpecialFeatures(Method m) {
  result =
    count(LambdaExpr e | e.getEnclosingCallable() = m) +
    count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
    count(FunctionalExpr e | e.getEnclosingCallable() = m) +
    count(SwitchExpr e | e.getEnclosingCallable() = m) +
    count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
    count(MemberRefExpr e | e.getEnclosingCallable() = m) +
    count(CastExpr e | e.getEnclosingCallable() = m) +
    count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
    count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
    count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
    count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
    count(CharacterLiteral e | e.getEnclosingCallable() = m) +
    count(PreIncExpr e | e.getEnclosingCallable() = m) +
    count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m
where
  m.fromSource() and
  m.hasStringSignature("bind(Exchange, Queue)") and
  m.getDeclaringType().hasName("BindingConfig")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // field accesses
  count(FieldWrite f | f.getEnclosingCallable() = m and f.getField().fromSource()) as field_writes,
  getClassOtherInvocations(m) as same_class_other_invoc,
  getNonClassKnownInvocations(m) as diff_class_known_invoc,
  getNonClassUnknownInvocations(m) as diff_class_unknown_invoc,
  count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
  numSpecialFeatures(m) as special_count 
2024-04-08 01:06:39,887 - ERROR - [ForkPoolWorker-4] - count_test_stats.ql 
2024-04-08 01:06:39,888 - ERROR - [ForkPoolWorker-4] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("bind(Exchange, Queue)") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("BindingConfig") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
2024-04-08 01:06:59,192 - ERROR - [ForkPoolWorker-4] - Query files: 
2024-04-08 01:06:59,192 - ERROR - [ForkPoolWorker-4] - log_functions.ql 
2024-04-08 01:06:59,194 - ERROR - [ForkPoolWorker-4] - import java

from Method m
where m.fromSource() 
    and m.getDeclaringType().hasName("QueueConfig")
select m.getQualifiedName(), m.getStringSignature() 
2024-04-08 01:06:59,196 - ERROR - [ForkPoolWorker-4] - count_stats.ql 
2024-04-08 01:06:59,198 - ERROR - [ForkPoolWorker-4] - import java

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%")
    )
  )
}

int getClassOtherInvocations(Method targetMethod) {
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() = targetMethod.getDeclaringType() | mCall)    
}

int getNonClassUnknownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      not hasKnownPackage(mCall.getCallee())
  )
}

int getNonClassKnownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      hasKnownPackage(mCall.getCallee())
  )
}

int numSpecialFeatures(Method m) {
  result =
    count(LambdaExpr e | e.getEnclosingCallable() = m) +
    count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
    count(FunctionalExpr e | e.getEnclosingCallable() = m) +
    count(SwitchExpr e | e.getEnclosingCallable() = m) +
    count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
    count(MemberRefExpr e | e.getEnclosingCallable() = m) +
    count(CastExpr e | e.getEnclosingCallable() = m) +
    count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
    count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
    count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
    count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
    count(CharacterLiteral e | e.getEnclosingCallable() = m) +
    count(PreIncExpr e | e.getEnclosingCallable() = m) +
    count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m
where
  m.fromSource() and
  m.hasStringSignature("buildDeadLetterQueue(QueueConfig, DeadLetterConfig)") and
  m.getDeclaringType().hasName("QueueConfig")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // field accesses
  count(FieldWrite f | f.getEnclosingCallable() = m and f.getField().fromSource()) as field_writes,
  getClassOtherInvocations(m) as same_class_other_invoc,
  getNonClassKnownInvocations(m) as diff_class_known_invoc,
  getNonClassUnknownInvocations(m) as diff_class_unknown_invoc,
  count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
  numSpecialFeatures(m) as special_count 
2024-04-08 01:06:59,200 - ERROR - [ForkPoolWorker-4] - count_test_stats.ql 
2024-04-08 01:06:59,202 - ERROR - [ForkPoolWorker-4] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("buildDeadLetterQueue(QueueConfig, DeadLetterConfig)") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("QueueConfig") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
2024-04-08 01:07:18,877 - ERROR - [ForkPoolWorker-4] - Query files: 
2024-04-08 01:07:18,877 - ERROR - [ForkPoolWorker-4] - log_functions.ql 
2024-04-08 01:07:18,879 - ERROR - [ForkPoolWorker-4] - import java

from Method m
where m.fromSource() 
    and m.getDeclaringType().hasName("ExchangeConfig")
select m.getQualifiedName(), m.getStringSignature() 
2024-04-08 01:07:18,880 - ERROR - [ForkPoolWorker-4] - count_stats.ql 
2024-04-08 01:07:18,881 - ERROR - [ForkPoolWorker-4] - import java

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%")
    )
  )
}

int getClassOtherInvocations(Method targetMethod) {
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() = targetMethod.getDeclaringType() | mCall)    
}

int getNonClassUnknownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      not hasKnownPackage(mCall.getCallee())
  )
}

int getNonClassKnownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      hasKnownPackage(mCall.getCallee())
  )
}

int numSpecialFeatures(Method m) {
  result =
    count(LambdaExpr e | e.getEnclosingCallable() = m) +
    count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
    count(FunctionalExpr e | e.getEnclosingCallable() = m) +
    count(SwitchExpr e | e.getEnclosingCallable() = m) +
    count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
    count(MemberRefExpr e | e.getEnclosingCallable() = m) +
    count(CastExpr e | e.getEnclosingCallable() = m) +
    count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
    count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
    count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
    count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
    count(CharacterLiteral e | e.getEnclosingCallable() = m) +
    count(PreIncExpr e | e.getEnclosingCallable() = m) +
    count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m
where
  m.fromSource() and
  m.hasStringSignature("buildExchange(ExchangeConfig)") and
  m.getDeclaringType().hasName("ExchangeConfig")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // field accesses
  count(FieldWrite f | f.getEnclosingCallable() = m and f.getField().fromSource()) as field_writes,
  getClassOtherInvocations(m) as same_class_other_invoc,
  getNonClassKnownInvocations(m) as diff_class_known_invoc,
  getNonClassUnknownInvocations(m) as diff_class_unknown_invoc,
  count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
  numSpecialFeatures(m) as special_count 
2024-04-08 01:07:18,882 - ERROR - [ForkPoolWorker-4] - count_test_stats.ql 
2024-04-08 01:07:18,883 - ERROR - [ForkPoolWorker-4] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("buildExchange(ExchangeConfig)") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("ExchangeConfig") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
2024-04-08 01:07:25,470 - ERROR - [ForkPoolWorker-4] - Query files: 
2024-04-08 01:07:25,470 - ERROR - [ForkPoolWorker-4] - log_functions.ql 
2024-04-08 01:07:25,472 - ERROR - [ForkPoolWorker-4] - import java

from Method m
where m.fromSource() 
    and m.getDeclaringType().hasName("QueueConfig")
select m.getQualifiedName(), m.getStringSignature() 
2024-04-08 01:07:25,474 - ERROR - [ForkPoolWorker-4] - count_stats.ql 
2024-04-08 01:07:25,475 - ERROR - [ForkPoolWorker-4] - import java

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%")
    )
  )
}

int getClassOtherInvocations(Method targetMethod) {
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() = targetMethod.getDeclaringType() | mCall)    
}

int getNonClassUnknownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      not hasKnownPackage(mCall.getCallee())
  )
}

int getNonClassKnownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      hasKnownPackage(mCall.getCallee())
  )
}

int numSpecialFeatures(Method m) {
  result =
    count(LambdaExpr e | e.getEnclosingCallable() = m) +
    count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
    count(FunctionalExpr e | e.getEnclosingCallable() = m) +
    count(SwitchExpr e | e.getEnclosingCallable() = m) +
    count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
    count(MemberRefExpr e | e.getEnclosingCallable() = m) +
    count(CastExpr e | e.getEnclosingCallable() = m) +
    count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
    count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
    count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
    count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
    count(CharacterLiteral e | e.getEnclosingCallable() = m) +
    count(PreIncExpr e | e.getEnclosingCallable() = m) +
    count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m
where
  m.fromSource() and
  m.hasStringSignature("buildQueue(QueueConfig, DeadLetterConfig)") and
  m.getDeclaringType().hasName("QueueConfig")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // field accesses
  count(FieldWrite f | f.getEnclosingCallable() = m and f.getField().fromSource()) as field_writes,
  getClassOtherInvocations(m) as same_class_other_invoc,
  getNonClassKnownInvocations(m) as diff_class_known_invoc,
  getNonClassUnknownInvocations(m) as diff_class_unknown_invoc,
  count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
  numSpecialFeatures(m) as special_count 
2024-04-08 01:07:25,477 - ERROR - [ForkPoolWorker-4] - count_test_stats.ql 
2024-04-08 01:07:25,478 - ERROR - [ForkPoolWorker-4] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("buildQueue(QueueConfig, DeadLetterConfig)") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("QueueConfig") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
2024-04-08 01:07:32,221 - ERROR - [ForkPoolWorker-4] - Query files: 
2024-04-08 01:07:32,221 - ERROR - [ForkPoolWorker-4] - log_functions.ql 
2024-04-08 01:07:32,223 - ERROR - [ForkPoolWorker-4] - import java

from Method m
where m.fromSource() 
    and m.getDeclaringType().hasName("ThresholdReQueuePolicy")
select m.getQualifiedName(), m.getStringSignature() 
2024-04-08 01:07:32,225 - ERROR - [ForkPoolWorker-4] - count_stats.ql 
2024-04-08 01:07:32,227 - ERROR - [ForkPoolWorker-4] - import java

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%")
    )
  )
}

int getClassOtherInvocations(Method targetMethod) {
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() = targetMethod.getDeclaringType() | mCall)    
}

int getNonClassUnknownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      not hasKnownPackage(mCall.getCallee())
  )
}

int getNonClassKnownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      hasKnownPackage(mCall.getCallee())
  )
}

int numSpecialFeatures(Method m) {
  result =
    count(LambdaExpr e | e.getEnclosingCallable() = m) +
    count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
    count(FunctionalExpr e | e.getEnclosingCallable() = m) +
    count(SwitchExpr e | e.getEnclosingCallable() = m) +
    count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
    count(MemberRefExpr e | e.getEnclosingCallable() = m) +
    count(CastExpr e | e.getEnclosingCallable() = m) +
    count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
    count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
    count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
    count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
    count(CharacterLiteral e | e.getEnclosingCallable() = m) +
    count(PreIncExpr e | e.getEnclosingCallable() = m) +
    count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m
where
  m.fromSource() and
  m.hasStringSignature("canReQueue(Message)") and
  m.getDeclaringType().hasName("ThresholdReQueuePolicy")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // field accesses
  count(FieldWrite f | f.getEnclosingCallable() = m and f.getField().fromSource()) as field_writes,
  getClassOtherInvocations(m) as same_class_other_invoc,
  getNonClassKnownInvocations(m) as diff_class_known_invoc,
  getNonClassUnknownInvocations(m) as diff_class_unknown_invoc,
  count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
  numSpecialFeatures(m) as special_count 
2024-04-08 01:07:32,228 - ERROR - [ForkPoolWorker-4] - count_test_stats.ql 
2024-04-08 01:07:32,231 - ERROR - [ForkPoolWorker-4] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("canReQueue(Message)") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("ThresholdReQueuePolicy") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
2024-04-08 01:11:33,168 - ERROR - [ForkPoolWorker-5] - Query files: 
2024-04-08 01:11:33,169 - ERROR - [ForkPoolWorker-5] - log_functions.ql 
2024-04-08 01:11:33,170 - ERROR - [ForkPoolWorker-5] - import java

from Method m
where m.fromSource() 
    and m.getDeclaringType().hasName("ExchangeConfig")
select m.getQualifiedName(), m.getStringSignature() 
2024-04-08 01:11:33,171 - ERROR - [ForkPoolWorker-5] - count_stats.ql 
2024-04-08 01:11:33,172 - ERROR - [ForkPoolWorker-5] - import java

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%")
    )
  )
}

int getClassOtherInvocations(Method targetMethod) {
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() = targetMethod.getDeclaringType() | mCall)    
}

int getNonClassUnknownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      not hasKnownPackage(mCall.getCallee())
  )
}

int getNonClassKnownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      hasKnownPackage(mCall.getCallee())
  )
}

int numSpecialFeatures(Method m) {
  result =
    count(LambdaExpr e | e.getEnclosingCallable() = m) +
    count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
    count(FunctionalExpr e | e.getEnclosingCallable() = m) +
    count(SwitchExpr e | e.getEnclosingCallable() = m) +
    count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
    count(MemberRefExpr e | e.getEnclosingCallable() = m) +
    count(CastExpr e | e.getEnclosingCallable() = m) +
    count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
    count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
    count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
    count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
    count(CharacterLiteral e | e.getEnclosingCallable() = m) +
    count(PreIncExpr e | e.getEnclosingCallable() = m) +
    count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m
where
  m.fromSource() and
  m.hasStringSignature("applyDefaultConfig(ExchangeConfig)") and
  m.getDeclaringType().hasName("ExchangeConfig")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // field accesses
  count(FieldWrite f | f.getEnclosingCallable() = m and f.getField().fromSource()) as field_writes,
  getClassOtherInvocations(m) as same_class_other_invoc,
  getNonClassKnownInvocations(m) as diff_class_known_invoc,
  getNonClassUnknownInvocations(m) as diff_class_unknown_invoc,
  count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
  numSpecialFeatures(m) as special_count 
2024-04-08 01:11:33,173 - ERROR - [ForkPoolWorker-5] - count_test_stats.ql 
2024-04-08 01:11:33,174 - ERROR - [ForkPoolWorker-5] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("applyDefaultConfig(ExchangeConfig)") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("ExchangeConfig") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
2024-04-08 01:11:40,349 - ERROR - [ForkPoolWorker-5] - Query files: 
2024-04-08 01:11:40,350 - ERROR - [ForkPoolWorker-5] - log_functions.ql 
2024-04-08 01:11:40,351 - ERROR - [ForkPoolWorker-5] - import java

from Method m
where m.fromSource() 
    and m.getDeclaringType().hasName("AutoReQueueScheduler")
select m.getQualifiedName(), m.getStringSignature() 
2024-04-08 01:11:40,353 - ERROR - [ForkPoolWorker-5] - count_stats.ql 
2024-04-08 01:11:40,354 - ERROR - [ForkPoolWorker-5] - import java

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%")
    )
  )
}

int getClassOtherInvocations(Method targetMethod) {
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() = targetMethod.getDeclaringType() | mCall)    
}

int getNonClassUnknownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      not hasKnownPackage(mCall.getCallee())
  )
}

int getNonClassKnownInvocations(Method targetMethod){
  result = count(
      MethodCall mCall |
      mCall.getCaller() = targetMethod and
      mCall.getCallee().getDeclaringType() != targetMethod.getDeclaringType() and
      hasKnownPackage(mCall.getCallee())
  )
}

int numSpecialFeatures(Method m) {
  result =
    count(LambdaExpr e | e.getEnclosingCallable() = m) +
    count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
    count(FunctionalExpr e | e.getEnclosingCallable() = m) +
    count(SwitchExpr e | e.getEnclosingCallable() = m) +
    count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
    count(MemberRefExpr e | e.getEnclosingCallable() = m) +
    count(CastExpr e | e.getEnclosingCallable() = m) +
    count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
    count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
    count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
    count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
    count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
    count(CharacterLiteral e | e.getEnclosingCallable() = m) +
    count(PreIncExpr e | e.getEnclosingCallable() = m) +
    count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m
where
  m.fromSource() and
  m.hasStringSignature("autoReQueue()") and
  m.getDeclaringType().hasName("AutoReQueueScheduler")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // field accesses
  count(FieldWrite f | f.getEnclosingCallable() = m and f.getField().fromSource()) as field_writes,
  getClassOtherInvocations(m) as same_class_other_invoc,
  getNonClassKnownInvocations(m) as diff_class_known_invoc,
  getNonClassUnknownInvocations(m) as diff_class_unknown_invoc,
  count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
  numSpecialFeatures(m) as special_count 
2024-04-08 01:11:40,355 - ERROR - [ForkPoolWorker-5] - count_test_stats.ql 
2024-04-08 01:11:40,356 - ERROR - [ForkPoolWorker-5] - import java

// What makes a test invalid?
// calls functions that are not from known assertion libraries or common java
// uses object functions beyond getters and setters (e.g. they do computation)
// has no content
// uses fixtures
predicate hasUnknownTestSource(Method m) {
  exists(AnnotationType t |
    t = m.getAnAnnotation().getType() and
    (
      // JUnit5
      t.hasName("EnumSource") or
      t.hasName("MethodSource") or
      t.hasName("CsvSource") or
      t.hasName("CsvFileSource") or
      t.hasName("ArgumentsProvider") or
      t.hasName("ResourceLock") or
      // JUnit4
      t.hasName("Ignore") or
      // TestNG
      t.hasName("Parameters")
    )
  )
}

predicate isFixtureAnnotation(AnnotationType t) {
  t.hasName("Before") or
  t.hasName("After") or
  t.getName().matches("Before%") or
  t.getName().matches("After%")
}

predicate reliesOnFixtures(Class c) {
  exists(AnnotationType t |
    t = c.getAMethod().getAnAnnotation().getType() and
    isFixtureAnnotation(t)
  )
}

predicate hasKnownPackage(Callable c) {
  exists(string n |
    n = c.getDeclaringType().getPackage().getName() and
    (
      // Java Builtin
      n.matches("java.lang%") or
      n.matches("java.util%") or
      n.matches("java.io%") or
      n.matches("java.net%") or
      n.matches("java.math%") or
      n.matches("java.time%") or
      // JSON Libraries
      n.matches("org.json%") or
      n.matches("com.google.code.json") or
      // Logging Libraries
      n.matches("org.apache.logging%") or
      n.matches("org.slf4j") or
      // Common Libraries
      n.matches("com.fasterxml.jackson") or
      n.matches("gnu.trove") or
      n.matches("org.apache.commons%") or
      n.matches("com.google.guava%") or
      n.matches("org.joda.time%") or
      n.matches("org.eclipse%") or

      // Testing + Assertion Libraries
      n.matches("org.junit%") or
      n.matches("org.testng%") or
      n.matches("org.assertj%") or
      n.matches("com.google.truth") or
      n.matches("org.hamcrest") or
      n.matches("org.valid4j") or
      n.matches("net.ttddyy")
    )
  )
}

int getClassOtherInvocations(Class c, Method testMethod, Method targetMethod) {
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee().getDeclaringType() = c and
        mCall.getCallee() != targetMethod | mCall
    )    
}

int getNonClassUnknownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        not hasKnownPackage(mCall.getCallee())
    )
}

int getNonClassKnownInvocations(Method testMethod, Method targetMethod){
    result = count(
        MethodCall mCall |
        mCall.getCaller() = testMethod and
        mCall.getCallee() != targetMethod and
        mCall.getCallee().getDeclaringType() != testMethod.getDeclaringType() and
        hasKnownPackage(mCall.getCallee())
    )
}

int numSpecialFeatures(Method m) {
    result =
      count(LambdaExpr e | e.getEnclosingCallable() = m) +
      count(VirtualMethodAccess e | e.getEnclosingCallable() = m) +
      count(FunctionalExpr e | e.getEnclosingCallable() = m) +
      count(SwitchExpr e | e.getEnclosingCallable() = m) +
      count(StringTemplateExpr e | e.getEnclosingCallable() = m) +
      count(MemberRefExpr e | e.getEnclosingCallable() = m) +
      count(CastExpr e | e.getEnclosingCallable() = m) +
      count(PropertyRefExpr e | e.getEnclosingCallable() = m) +
      count(WildcardTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnsafeCoerceExpr e | e.getEnclosingCallable() = m) +
      count(RecordPatternExpr e | e.getEnclosingCallable() = m) +
      count(IntersectionTypeAccess e | e.getEnclosingCallable() = m) +
      count(UnionTypeAccess e | e.getEnclosingCallable() = m) +
      count(CharacterLiteral e | e.getEnclosingCallable() = m) +
      count(PreIncExpr e | e.getEnclosingCallable() = m) +
      count(PostIncExpr e | e.getEnclosingCallable() = m)
}

from Method m, Method t
where
  m.fromSource() and t.fromSource() and
  m.hasStringSignature("autoReQueue()") and t.hasStringSignature("") and
  m.getDeclaringType().hasName("AutoReQueueScheduler") and t.hasStringSignature("")
select count(FieldAccess f | f.getEnclosingCallable() = m and f.getField().fromSource() and not f.getField().isFinal() | f) as field_accesses, // test field access
    getClassOtherInvocations(m.getDeclaringType(), m, t) as same_class_other_invoc,
    getNonClassKnownInvocations(m, t) as diff_class_known_invoc,
    getNonClassUnknownInvocations(m, t) as diff_class_unknown_invoc,
    count(ConditionalStmt cst | cst.getEnclosingCallable() = m | cst) as branch_count,
    numSpecialFeatures(m) as special_count 
